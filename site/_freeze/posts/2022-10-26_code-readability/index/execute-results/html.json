{
  "hash": "04125334170e42d72e4eb59b9f2acd15",
  "result": {
    "markdown": "---\ntitle: \"Code Readability\"\ndate: \"2022-10-26\"\nauthor: \"Neha Moopen\"\nformat: \"html\"\n---\n\n\n::: {.callout-note icon=false}\n\n- **Date:** Wednesday, 26th October 2022\n- **Time:** 15:00-17:00\n- **Location:** Bucheliuszaal 6.18, University Library (Utrecht Science Park)\n- **Presentation:** [Code Readability: Linters & Formatters in R & Python](https://utrechtuniversity.github.io/programming-cafe/posts/2022-10-26_code-readability/)\n- **Presenter:** Neha Moopen\n\n:::\n\nHow can you make your code more readable?\n\nðŸ‘† That's what we discussed in this edition of the Programming Cafe. We learnt about style guides in R [(the tidyverse style guide)](https://style.tidyverse.org/) & Python ([PEP-8](https://peps.python.org/pep-0008/)) and how we can use linters and (auto)formatters to ensure our code adheres to conventions followed by the community.\n\n## Slides\n\n\n```{=html}\n<iframe width=\"1050\" height=\"700\" src=\"../../presentations/2022-10-26_code-readability/slides/2022-10-26_code-readability.html\"></iframe>\n```\n\n\n## Exercises\n\nThe scripts for the exercises can be downloaded via this _link_. \nIf more convenient, the code has also been included as chunks/blocks below.\n\n- Run a linter through your R and/or Python code and identify style issues. \n    - Edit your code to improve the style compatibility, based on the feedback from your linter.\n    \n- Run an (auto)formatter through your R and/or Python code to automatically fix issues instead of simply flagging them.\n\n### R\n\nUse the [`lintr`](https://lintr.r-lib.org/) & [`styler`](https://styler.r-lib.org/) packages to lint and (auto)format the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfun <- function(one) {\n  one.plus.one <- oen + 1\n  four <- newVar <- matrix(1:10, nrow = 2)\n  four[1, ]\n  txt <- \"hi\"\n  three <- two + 1\n  if (txt == \"hi\") 4\n  5\n}\n```\n:::\n\n\nThe relevant functions are:\n\n- `lintr::lint(filename)`\n- `styler::style_file(filepath)`\n\n### Python\n\nUse the [`flake8`](https://pypi.org/project/flake8/) & [`black`](https://pypi.org/project/black/)` libraries to lint and (auto)format the following code:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n### This is an important function\nsome_constant=1\ndef MYFUNCTION (X ,y = 1): \n z=\"1\",;y=y+1\n return (\n        X+y  <  some_constant) == True  #This is a very long comment that about how the condition can be checked directly in the return statement.\nfrom numpy import *\n```\n:::\n\n\nThe relevant functions are:\n\n- `flake8 path/to/code/to/check.py`\n- `black {source_file_or_directory}`\n\n## References\n\n1. <https://utrechtuniversity.github.io/workshop-computational-reproducibility/chapters/readability.html>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}