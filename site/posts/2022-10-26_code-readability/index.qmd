---
title: "Code Readability"
date: "2022-10-26"
author: "Neha Moopen"
format: "html"
---

::: {.callout-note icon=false}

- **Date:** Wednesday, 26th October 2022
- **Time:** 15:00-17:00
- **Location:** Bucheliuszaal 6.18, University Library (Utrecht Science Park)
- **Presentation:** [Code Readability: Linters & Formatters in R & Python](https://utrechtuniversity.github.io/programming-cafe/posts/2022-10-26_code-readability/)
- **Presenter:** Neha Moopen

:::

How can you make your code more readable?

ðŸ‘† That's what we discussed in this edition of the Programming Cafe. We learnt about style guides in R [(the tidyverse style guide)](https://style.tidyverse.org/) & Python ([PEP-8](https://peps.python.org/pep-0008/)) and how we can use linters and (auto)formatters to ensure our code adheres to conventions followed by the community.

## Slides

```{=html}
<iframe width="1050" height="700" src="../../presentations/2022-10-26_code-readability/slides/2022-10-26_code-readability.html"></iframe>
```

## Exercises

The scripts for the exercises can be downloaded via this _link_. 
If more convenient, the code has also been included as chunks/blocks below.

- Run a linter through your R and/or Python code and identify style issues. 
    - Edit your code to improve the style compatibility, based on the feedback from your linter.
    
- Run an (auto)formatter through your R and/or Python code to automatically fix issues instead of simply flagging them.

### R

Use the [`lintr`](https://lintr.r-lib.org/) & [`styler`](https://styler.r-lib.org/) packages to lint and (auto)format the following code:

```{r}
#| eval: false
fun <- function(one) {
  one.plus.one <- oen + 1
  four <- newVar <- matrix(1:10, nrow = 2)
  four[1, ]
  txt <- "hi"
  three <- two + 1
  if (txt == "hi") 4
  5
}
```

The relevant functions are:

- `lintr::lint(filename)`
- `styler::style_file(filepath)`

### Python

Use the [`flake8`](https://pypi.org/project/flake8/) & [`black`](https://pypi.org/project/black/)` libraries to lint and (auto)format the following code:

```{python}
#| eval: false
### This is an important function
some_constant=1
def MYFUNCTION (X ,y = 1): 
 z="1",;y=y+1
 return (
        X+y  <  some_constant) == True  #This is a very long comment that about how the condition can be checked directly in the return statement.
from numpy import *
```

The relevant functions are:

- `flake8 path/to/code/to/check.py`
- `black {source_file_or_directory}`

## References

1. <https://utrechtuniversity.github.io/workshop-computational-reproducibility/chapters/readability.html>