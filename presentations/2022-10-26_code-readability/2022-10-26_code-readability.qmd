--- 
format:
  revealjs:
    theme: ./templates/uu.scss
    logo: ./templates/UU_logo_2021_EN_RGB.png
    controls: true
    navigation-mode: linear
    slide-number: true
    multiplex: true
    footer: "Neha Moopen, Raoul Schram, Ken Krige"
---

# Welcome to the Programming Cafe! {background-color="#FFCD00"}

![](./templates/UU_logo_2021_EN_RGB.png){.absolute top=-200 left=-240 width="300" height="120"}
---

## Plan for today

::: {style="text-align: left; margin-top: 2em"}

|    |    |
|------------------------------|-------------|
| Welcome | 10 min |
| Introduction to Code Readability | 15 min |
| Linters & Formatters in R & Python | 15 min |
| Exercises or Work on your own code | 60 min |
| Wrap-up | 10 min |
| Drinks! |

:::

---

## Programming Cafe

::: {style="text-align: left; margin-top: 2em"}

-    Previously the R-Cafe
-    An informal, community event
-    Work on your own code
-    Themes with presentations and exercises
-    Interaction
:::

# Code Readability {background-color="#FFCD00"}

---

## Good quality code is:

::: {style="text-align: left; margin-top: 2em"}

-    Readable
-    Reusable
-    Robust

:::

---

## What is a style guide and why should I follow one?

![](images/code-readability-xkdc.png) 

---

## What is a style guide and why should I follow one?

A programming style guide consists of rules or guidelines on writing code. These can be seen as conventions or best practices for the community.  
 
Following a style guide will make your code more consistent and readable, both for you and anyone who will interact with your code. It also reduces the chances of errors. 

---

## Some elements of style guides

Guidance of strategic use of **whitespace** and **new lines**:

Compare:

```r
this <- function(arg1,arg2) res<-arg1*arg2;return(res)
hurts <- mean(c(this(3,4),this(3,1),this(9,9))); print(hurts)
```
<br>
```r
this <- function(arg1,arg2){
  res <- arg1 * arg2
  return(res)
}

hurts <- mean(
  c(
    this(3,4),
    this(3,1),
    this(9,9)
    )
  )
print(hurts)
```
The second chunk is longer, but more modular and readable.

---

## Some elements of style guides

Guidance on descriptive **naming** of functions and variables

Compare:

```python
for i in my_shopping_basket:
  if(test(i)) > 10:
    purch(i)
  else:
    disc(i)
```
<br>
```python
for item in basket:
  if(testNecessity(item)) > 10:
    purchase(item)
  else:
    discard(item)
```
In the second chunk, we start functions with a verb and make variable names _just_ long enough to be meaningful

---

## How can I start working with a style guide?

Most programming languages have style guides and these are followed by the community or enforced within organizations.

::: {style="text-align: left"}

- R: [The tidyverse style guide](https://style.tidyverse.org/) 

- Python: [PEP-8](https://peps.python.org/pep-0008/) 

:::

---

## How can I start working with a style guide?

There are tools available to help you with this!
You can use a **linter** and **(auto)formatter** while coding!

---

## Linters

A linter is a **static** code analysis tool. 

It will browse your code and flag/report issues (style, errors, bugs) as output. 
Then it's up to the programming to go through the list and fix the issues. 

---

## Linters

::: {style="text-align: left"}

- R: The [lintr](https://lintr.r-lib.org/) package 

- Python: There are several libraries, today we'll use [flake8](https://flake8.pycqa.org/en/latest/)

:::

---

## Linters

The [lintr](https://lintr.r-lib.org/) package in R:

![](https://lintr.r-lib.org/reference/figures/demo.gif)

---

## Linters

The [lintr](https://lintr.r-lib.org/) package in R:

![](images/lintr-r.JPG)
---

## (Auto)formatters

While linters provide a report of issues, (auto)formatters will browse the code and correct issues automatically/directly.

The corrections will depend on the rules encoded within the package/library.

::: {style="text-align: left"}

- R: The [styler](https://styler.r-lib.org/) package 

- Python: There are several libraries, today we'll use [black](https://black.readthedocs.io/en/latest/)

:::

---

## (Auto)formatters

The [styler](https://styler.r-lib.org/) package in R:

![](https://raw.githubusercontent.com/lorenzwalthert/some_raw_data/master/styler_0.1.gif)
---

## Your turn!

Try linting and formatting your own code!

Don't have your own code? You can use our exercise files:

::: {style="text-align: left"}

- R: [bad.R]()

- Python: [pep8.py]()

:::

---

## Linters & Formatters in R

Replace `bad.R` with the relevant script name.

Make sure you're in the same working directory as the script!

```
install.packages(c("lintr", "styler"))

library(lintr)
library(styler)

lint("bad.R")

# you have two options for styler:

# style using a function

style_file("bad.R")

# or use the RStudio add-in (Addins drop-down menu -> Style active file)

```
---

## Linters & Formatters in Python

Replace 'pep8.py' with the relevant script name if needed.

Make sure you're in the same working directory as the script!

```
pip install flake8 black

flake8 pep8.py

black pep8.py
```

# {data-background-color="#FFCD00"}

![](./templates/UU_logo_2021_EN_RGB_payoff.png)